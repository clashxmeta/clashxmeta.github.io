<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashxmeta.github.io/news/article-21753.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Source Generator实战</title>
        <meta name="description" content="前言 最近刷B站的时候浏览到了老杨的关于Source Generator的简介视频。其实当初.Net 6刚发布时候看到过微软介绍这个东西，但并没有在意。因为粗看觉得这东西限制蛮多的，毕竟C#是强类型语" />
        <link rel="icon" href="__ADDON__/img/clashxmeta/favicon.ico" type="image/x-icon"/>
    <link rel="preconnect" href="https://fonts.gstatic.com/">
    <link href="/assets/website/css/clashxmeta/css2.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/clashxmeta/animate.min.css">
    <link href="/assets/website/css/clashxmeta/pace-theme-loading-bar.css" rel="stylesheet">
    <link href="/assets/website/css/clashxmeta/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/clashxmeta/YouTubePopUp.css">
    <link rel="stylesheet" href="/assets/website/css/clashxmeta/styles.css">
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KHJRY7ZEBT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KHJRY7ZEBT');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div id="preloader">
        <div class="loadingio-spinner-ripple-n04314c8ef9">
            <div class="ldio-r67ztvwtjg">
                <div></div>
                <div></div>
            </div>
        </div>
    </div>
    <div id="back-to-top" class="d-flex align-items-center justify-content-center display-6">☝️</div>
    <div class="bg-gradient-to-top">
                <!-- ::::::::::: NAVBAR :::::::::::::::-->
        <div class="fixed-top">
            <div class="container">
                <nav class="navbar navbar-expand-lg navbar-light pt-4">
                    <div class="container-fluid p-0">
                        <a class="navbar-brand" href="/">
                                                        <span>ClashXMeta</span>
                                                    </a>
                        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                        <div class="collapse navbar-collapse" id="navbarNav">
                            <ul class="navbar-nav me-auto mx-auto">
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/">首页</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/free-nodes/">免费节点</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/news/">新闻资讯</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="#">关于</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="#">联系</a>
                                </li>
                            </ul>
                            
                        </div>
                    </div>
                </nav>
            </div>
        </div>
        <!-- ::::::::::: /END NAVBAR ::::::::::-->
        <!-- ::::::::::: INTRODUCTION :::::::::::::::-->
        <div id="blog-hero">
            <div class="container">
                <div class="row justify-content-between">
                    <div class="col-sm-8 offset-sm-2">
                        <h1 class="display-6 font-weight-medium pb-3 text-center">Source Generator实战</h1>
                        <p class="accent-text-color pb-3 text-center font-size-14">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <!-- ::::::::::: /END INTRODUCTION ::::::::::-->
    </div>
    <!-- ::::::::::::::: ABOUT US ::::::::::::::::::::::::-->
    <div class="container wow animate__fadeInUp pt-5" id="about">
        <div class="row">
            <div class="col-md-9">
                                  				  				  				<h2 id="前言">前言</h2> <p>最近刷B站的时候浏览到了老杨的关于Source Generator的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.bilibili.com/video/BV1CZ4y1Q7oK"  title="简介视频" target="_blank" rel="nofollow">简介视频</a>。其实当初.Net 6刚发布时候看到过微软介绍这个东西，但并没有在意。因为粗看觉得这东西限制蛮多的，毕竟C#是强类型语言，有些动态的东西不好操作，而且又有Fody、Natasha这些操作IL的库。</p> <p>最近写前端比较多，看到<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/antfu/unplugin-auto-import"  target="_blank" rel="nofollow">这个</a>和<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/unjs/unimport"  target="_blank" rel="nofollow">这个</a>，都是自动引入相关包，极大的提高了我开发前端的舒适度。又联想到隔壁Java的有Lombok，用起来都很香。搜了一下也没看到C#有相关的东西，于是决定自己动手开发一个，提高C#开发体验。</p> <h2 id="实现一个source-generator">实现一个Source Generator</h2> <p>这里不对Source Generator做基本的使用介绍，直接实操。如果需要了解相关信息，建议直接看<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview"  target="_blank" rel="nofollow">官方文档</a>或者去搜索相关文章。</p> <p>首先我们看一下效果，假如我的代码是</p> <pre><code class="language-c#">namespace SourceGenerator.Demo {     public partial class UserClass     {         [Property]         private string _test;     } }</code></pre> <p>那么，最终生成的应该是</p> <pre><code class="language-c#">// Auto-generated code namespace SourceGenerator.Demo {     public partial class UserClass     {         public string Test { get =&gt; _test; set =&gt; _test = value; }     } }</code></pre> <p>我们按最简单的实现来考虑，那么只需要</p> <ol> <li>在语法树中找到field</li> <li>找到字段的class、namespace</li> <li>生成代码</li> </ol> <h3 id="第一步">第一步</h3> <p>首先我们来看第一步。第一步需要找到field，这个我们借助Attribute的特性，能够很快的找到，在SourceGenerator中只需要判断一下Attribute的名字即可<br /> 定义一个SyntaxReciver，然后在SourceGenerator中注册一下</p> <pre><code class="language-csharp">// file: PropertyAttribute.cs using System;  namespace SourceGenerator.Common {     [AttributeUsage(AttributeTargets.Field)]     public class PropertyAttribute : Attribute     {         public const string Name = "Property";     } } // file: AutoPropertyReceiver.cs public class AutoPropertyReceiver : ISyntaxReceiver {     public List&lt;AttributeSyntax&gt; AttributeSyntaxList { get; } = new List&lt;AttributeSyntax&gt;();      public void OnVisitSyntaxNode(SyntaxNode syntaxNode)     {         if (syntaxNode is AttributeSyntax cds &amp;&amp; cds.Name is IdentifierNameSyntax identifierName &amp;&amp;             (                 identifierName.Identifier.ValueText == PropertyAttribute.Name ||                 identifierName.Identifier.ValueText == nameof(PropertyAttribute))            )         {             AttributeSyntaxList.Add(cds);         }     } }  // file: AutoPropertyGenerator.cs [Generator] public class AutoPropertyGenerator : ISourceGenerator {     public void Initialize(GeneratorInitializationContext context)     {         context.RegisterForSyntaxNotifications(() =&gt; new AutoPropertyReceiver());     }      // other code     ... }</code></pre> <h3 id="第二步">第二步</h3> <p>第二步就是SyntaxTree的查找，熟悉SyncaxTree的话比较容易完成</p> <pre><code class="language-csharp">public void Execute(GeneratorExecutionContext context) {     var syntaxReceiver = (AutoPropertyReceiver)context.SyntaxReceiver;     var attributeSyntaxList = syntaxReceiver.AttributeSyntaxList;      if (attributeSyntaxList.Count == 0)     {         return;     }      // 保存一下类名，因为一个类中可能有有多个字段生成，这里去掉重复     var classList = new List&lt;string&gt;();     foreach (var attributeSyntax in attributeSyntaxList)     {         // 找到class，并且判断一下是否有parital字段         var classDeclarationSyntax = attributeSyntax.FirstAncestorOrSelf&lt;ClassDeclarationSyntax&gt;();         if (classDeclarationSyntax == null ||             !classDeclarationSyntax.Modifiers.Any(m =&gt; m.IsKind(SyntaxKind.PartialKeyword)))         {             continue;         }          // 找到namespace         var namespaceDeclarationSyntax =             classDeclarationSyntax.FirstAncestorOrSelf&lt;BaseNamespaceDeclarationSyntax&gt;();          if (classList.Contains(classDeclarationSyntax.Identifier.ValueText))         {             continue;         }          // 找到field         var fieldDeclarationList = classDeclarationSyntax.Members.OfType&lt;FieldDeclarationSyntax&gt;().ToList();         if (fieldDeclarationList.Count == 0)         {             continue;         }         // 其他代码         ...     } }</code></pre> <h3 id="第三步">第三步</h3> <p>第三步就是简单粗暴的根据第二步中拿到的信息，拼一下字符串。</p> <p>当然其实拼字符串是很不好的行为，最好是用模板去实现，其次就算是拼字符串也理应用<code>StringBuilder</code>，但这里只是做一个Demo，无所谓了</p> <pre><code class="language-csharp">public void Execute(GeneratorExecutionContext context) {         ...         // 上面是第二步的代码         // 拼源代码字符串         var source = $@"// Auto-generated code  namespace {namespaceDeclarationSyntax.Name.ToString()} {{ public partial class {classDeclarationSyntax.Identifier} {{";         var propertyStr = "";         foreach (var fieldDeclaration in fieldDeclarationList)         {             var variableDeclaratorSyntax = fieldDeclaration.Declaration.Variables.FirstOrDefault();              var fieldName = variableDeclaratorSyntax.Identifier.ValueText;             var propertyName = GetCamelCase(fieldName);              propertyStr += $@" public string {propertyName} {{ get =&gt; {fieldName}; set =&gt; {fieldName} = value; }}";         }          source += propertyStr;         source += @" } } ";         // 添加到源代码，这样IDE才能感知         context.AddSource($"{classDeclarationSyntax.Identifier}.g.cs", source);         // 保存一下类名，避免重复生成         classList.Add(classDeclarationSyntax.Identifier.ValueText);     } }</code></pre> <h3 id="使用">使用</h3> <p>写一个测试类</p> <pre><code class="language-csharp">using SourceGenerator.Common;  namespace SourceGenerator.Demo;  public partial class UserClass {     [Property] private string _test = "test";      [Property] private string _test2; }</code></pre> <p>然后重启IDE，可以看到效果，并且直接调用属性是不报错的<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/4df308b46d6afba4248bb71016be6d6e.jpg" alt="Source Generator实战"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5a338e1f337622878e0331e7c84b91f0.jpg" alt="Source Generator实战"></p> <h3 id="结尾">结尾</h3> <p>这里仅演示了最基本的Source Generator的功能，限于篇幅也无法深入讲解，上面的代码可以在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/Weilence/SourceGenerator/tree/8776f50bef8093bf05726aa0d64022f4a2d4ffe3"  target="_blank" rel="nofollow">这里</a>查看，目前最新的代码还实现了字段生成构造函数，appsettings.json生成AppSettings常量字段类。</p> <p>如果你只是想使用，可以直接nuget安装<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.nuget.org/packages/SourceGenerator.Library/"  target="_blank" rel="nofollow">SourceGenerator.Library</a>。</p> <h3 id="以下为个人观点">以下为个人观点</h3> <p>Source Generator在我看来最大的价值在于提供开发时的体验。至于性能，可以用Fody等库Emit IL代码，功能更强大更完善，且没有分部类的限制。但此类IL库最大的问题在Design-Time时无法拿到生成后的代码，导致需要用一些奇奇怪怪的方法去用生成代码。</p> <p>Source Generator未来可以做的事情有很多，比如</p> <ol> <li>ORM实体映射<br /> 如果数据库是Code First，那么其实还好。但如果说是Db First，主流的ORM库都是通过命令去生成Model的，但命令通常我记不住，因为用的频率并不高。<br /> 如果后期加字段，要么我重新生成一次，我又得去找这个命令。要么我手动去C#代码中加这个字段，我能保证自己可以写正确，但是团队其他成员呢？</li> <li>结合Emit IL技术<br /> 上面其实说了Emit是无法在Design-Time中使用的，但如果我们使用Source Generator创建一些空的方法，然后用IL去改写，应该可以解决这个问题</li> <li>依赖注入<br /> 目前而言我们在Asp.net Core中创建了服务，那么我们需要AddSingleton等方法添加进去，这个其实很痛苦，因为首先会显得代码很长，其次这个操作很无聊且容易遗漏。<br /> 现在主流的框架都是通过Assembly扫描的方式去动态注册，避免手动去添加服务。但如果通过Source Generator扫码这些类，就可以在编译时添加进DI容器</li> <li>对象映射<br /> Java里面有个库叫做<code>MapStruct</code>，原理是用maven插件生成静态的java代码，然后按字段赋值。C#里面我好像没有看到这种方法，目前我用过的Automapper和Tinymapper都是先去做Bind，然后再使用。（插个题外话，Tinymapper以前的版本是不需要Bind，直接用的，但后来就要了，似乎是为了解决多线程的问题）<br /> Bind其实很痛苦，我很讨厌写这种样板代码，以至于我根本就不想用这类Mapper，直接Json Copy。</li> </ol> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-21752.htm">我们如何获得MySQL结果集中的所有唯一行？</a></p>
                                        <p>下一个：<a href="/news/article-22143.htm">开个宠物食品店需要什么证 开个宠物食品店需要什么证件</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-6-free-node-subscribe-links.htm" title="11月6日→20.3M/S|2024年最新免费节点ClashX Meta订阅链接地址">11月6日→20.3M/S|2024年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-3-free-node-subscribe-links.htm" title="12月3日→19.4M/S|2024年最新免费节点ClashX Meta订阅链接地址">12月3日→19.4M/S|2024年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-14-free-node-subscribe-links.htm" title="11月14日→21.7M/S|2024年最新免费节点ClashX Meta订阅链接地址">11月14日→21.7M/S|2024年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-3-node-share.htm" title="11月3日→21.5M/S|2024年最新免费节点ClashX Meta订阅链接地址">11月3日→21.5M/S|2024年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-17-free-node-subscribe.htm" title="11月17日→21.5M/S|2024年最新免费节点ClashX Meta订阅链接地址">11月17日→21.5M/S|2024年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-9-free-high-speed-nodes.htm" title="11月9日→18.1M/S|2024年最新免费节点ClashX Meta订阅链接地址">11月9日→18.1M/S|2024年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-15-free-subscribe-node.htm" title="11月15日→22.3M/S|2024年最新免费节点ClashX Meta订阅链接地址">11月15日→22.3M/S|2024年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-20774.htm" title=".NET 6上的WebView2体验_在线工具">.NET 6上的WebView2体验_在线工具</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-25-node-share-links.htm" title="11月25日→20.2M/S|2024年最新免费节点ClashX Meta订阅链接地址">11月25日→20.2M/S|2024年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-8-free-node-subscribe.htm" title="11月8日→21.1M/S|2024年最新免费节点ClashX Meta订阅链接地址">11月8日→21.1M/S|2024年最新免费节点ClashX Meta订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">21</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- ::::::::::::::: /END ABOUT US :::::::::::::::::::-->
        <!-- ::::::::::::::: FOOTER ::::::::::::::::::::-->
    <div id="footer" class="pt-lg-5 pt-0 mt-0 mt-lg-5 text-center text-lg-start">
        <div class="container">
            <hr class="hr">
            <div class="row gy-4 gy-lg-0 pb-5 pb-lg-4">
                <div class="col-sm-4 font-size-14 accent-text-color text-center text-lg-start">
                    <a href="/">ClashX Meta免费机场订阅节点官网</a> 版权所有 Powered by WordPress
                </div>
                <div class="col-sm-4 text-center">
                    <ul class="list-unstyled font-size-14 list-inline mb-0">
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#">Terms</a></li>
                        <li class="list-inline-item accent-text-color">·</li>
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#">Privacy Policy</a></li>
                    </ul>
                </div>
                <div class="col-sm-4 text-lg-end text-center">
                    <ul class="list-unstyled font-size-14 list-inline mb-0">
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#"><i data-feather="facebook" class="icon-24"></i></a></li>
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#"><i data-feather="twitter" class="icon-24"></i></a></li>
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#"><i data-feather="instagram" class="icon-24"></i></a></li>
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#"><i data-feather="slack" class="icon-24"></i></a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- ::::::::::::::: /END FOOTER :::::::::::::::-->
    <script src="/assets/website/js/frontend/clashxmeta/jquery-1.12.4.min.js"></script>
    <script src="/assets/website/js/frontend/clashxmeta/pace.min.js"></script>
    <script src="/assets/website/js/frontend/clashxmeta/wow.js"></script>
    <script src="/assets/website/js/frontend/clashxmeta/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashxmeta/feather.min.js"></script>
    <script src="/assets/website/js/frontend/clashxmeta/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>