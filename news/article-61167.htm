<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashxmeta.github.io/news/article-61167.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SpringMVC的异步</title>
        <meta name="description" content="SpringMVC的异步  最近接触了springMVC的异步模式，总结下来有两个优点： 第一，当然是节约tomcat容器的线程  第二，可以利用异步超时，起到一定的超时降级保护  注意：在Contr" />
        <link rel="icon" href="/assets/website/img/clashxmeta/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="ClashX Meta免费机场订阅节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashxmeta.github.io/news/article-61167.htm" />
    <meta property="og:site_name" content="ClashX Meta免费机场订阅节点官网" />
    <meta property="og:title" content="SpringMVC的异步" />
    <meta property="og:image" content="https://clashxmeta.github.io/uploads/20241102-1/dbdf429a17bce54770ac69161d6c2f8b.webp" />
        <meta property="og:release_date" content="2025-02-22T07:12:47" />
    <meta property="og:updated_time" content="2025-02-22T07:12:47" />
        <meta property="og:description" content="SpringMVC的异步  最近接触了springMVC的异步模式，总结下来有两个优点： 第一，当然是节约tomcat容器的线程  第二，可以利用异步超时，起到一定的超时降级保护  注意：在Contr" />
        
    <link rel="preconnect" href="https://fonts.gstatic.com/">
    <link href="/assets/website/css/clashxmeta/css2.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/clashxmeta/animate.min.css">
    <link href="/assets/website/css/clashxmeta/pace-theme-loading-bar.css" rel="stylesheet">
    <link href="/assets/website/css/clashxmeta/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/clashxmeta/YouTubePopUp.css">
    <link rel="stylesheet" href="/assets/website/css/clashxmeta/styles.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringMVC的异步">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KHJRY7ZEBT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KHJRY7ZEBT');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div id="preloader">
        <div class="loadingio-spinner-ripple-n04314c8ef9">
            <div class="ldio-r67ztvwtjg">
                <div></div>
                <div></div>
            </div>
        </div>
    </div>
    <div id="back-to-top" class="d-flex align-items-center justify-content-center display-6">☝️</div>
    <div class="bg-gradient-to-top">
                <!-- ::::::::::: NAVBAR :::::::::::::::-->
        <div class="fixed-top">
            <div class="container">
                <nav class="navbar navbar-expand-lg navbar-light pt-4">
                    <div class="container-fluid p-0">
                        <a class="navbar-brand" href="/">
                                                        <span>ClashX Meta</span>
                                                    </a>
                        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                        <div class="collapse navbar-collapse" id="navbarNav">
                            <ul class="navbar-nav me-auto mx-auto">
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/">首页</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/free-nodes/">免费节点</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/client.htm">客户端</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/news/">新闻资讯</a>
                                </li>
                                                            </ul>
                            
                        </div>
                    </div>
                </nav>
            </div>
        </div>
        <!-- ::::::::::: /END NAVBAR ::::::::::-->
        <!-- ::::::::::: INTRODUCTION :::::::::::::::-->
        <div id="blog-hero">
            <div class="container">
                <div class="row justify-content-between">
                    <div class="col-sm-8 offset-sm-2">
                        <h1 class="display-6 font-weight-medium pb-3 text-center">SpringMVC的异步</h1>
                        <p class="accent-text-color pb-3 text-center font-size-14">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <!-- ::::::::::: /END INTRODUCTION ::::::::::-->
    </div>
    <!-- ::::::::::::::: ABOUT US ::::::::::::::::::::::::-->
    <div class="container wow animate__fadeInUp pt-5" id="about">
        <div class="row">
            <div class="col-md-9">
                                <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h3> <a id="SpringMVC_0" rel="nofollow"></a>SpringMVC的异步</h3> <blockquote> <p>最近接触了springMVC的异步模式，总结下来有两个优点：</p> <p>第一，当然是节约tomcat容器的线程 </p> <p>第二，可以利用异步超时，起到一定的超时降级保护 </p> <p>注意：在Controller中使用时，一定要注意做好接口的线程池隔离，让慢的接口使用固定数量的线程池， 否则从tomcat减少的线程会转移到应用里，导致拥塞，在部分接口下游异常的情况的情况下，会出现影响正常接口的服务. </p> </blockquote> <p>关于Spring MVC的异步</p> <blockquote> <p>同步接口在请求处理过程中一直处于阻塞状态，而异步接口可以启用后台线程去处理耗时任务。基本的使用场景：</p> <ul> <li> <p>高并发场景</p> </li> <li> <p>高耗时场景</p> </li> </ul> <p>SpringMVC提供的几种异步实现方案：</p> <ul> <li> <p>Callable 提供的带有返回值的并发操作</p> </li> <li> <p>WebAsyncTask 对Callable的封装处理</p> </li> <li> <p>@Async </p> </li> <li> <p>DeferredResult</p> </li> </ul> </blockquote> <p>Callable</p> <p>就是最简单的线程运行，然后获取返回值的模式。优点是简单，缺点是不能中途取消，只有结合FutureTask才能够提供一定的控制。但是，也不能提供异步通知的方式。</p> <pre><code>/**  * @author qiyu  * @date 2020-07-30 20:03  */ @Slf4j @RestController public class AsyncController {      @GetMapping("/test")     public String test() throws InterruptedException {         log.info("主线程开始=====&gt;"+ Thread.currentThread().getName());         Thread.sleep(30000);         log.info("主线程结束=====&gt;"+ Thread.currentThread().getName());         return "success";     }       @GetMapping("/testAsync")     public Callable&lt;String&gt; testAsync() throws InterruptedException {         log.info("主线程开始=====&gt;"+ Thread.currentThread().getName());         Callable&lt;String&gt; callable = () -&gt; {             log.info("异步线程开始=====&gt;" + Thread.currentThread().getName());             Thread.sleep(30000);             log.info("异步线程结束=====&gt;" + Thread.currentThread().getName());             return "success";         };         log.info("主线程结束=====&gt;"+ Thread.currentThread().getName());         return callable;     } } </code></pre> <p>WebAsyncTask 实例</p> <blockquote> <p><code>WebAsyncTask</code> : 在构造时写入<code>Callable</code>主要业务逻辑<br /><code>WebAsyncTask.onCompletion(Runnable)</code> ：在当前任务执行结束以后，无论是执行成功还是异常中止，onCompletion的回调最终都会被调用<br /><code>WebAsyncTask.onError(Callable&gt;)</code> ：当异步任务抛出异常的时候，<code>onError()</code>方法即会被调用<br /><code>WebAsyncTask.onTimeout(Callable&gt;)</code> ：当异步任务发生超时的时候，<code>onTimeout()</code>方法即会被调用</p> <p><code>WebAsyncTask</code>类是<code>Spring</code>提供的一步任务处理类。</p> <p><code>WebAsyncTask</code>是<code>Callable</code>的升级版</p> </blockquote> <pre><code>@RequestMapping("/async")     @ResponseBody     public WebAsyncTask&lt;String&gt; asyncTask(){         // 1000 为超时设置         WebAsyncTask&lt;String&gt; webAsyncTask = new WebAsyncTask&lt;String&gt;(1000,new Callable&lt;String&gt;(){             @Override             public String call() throws Exception {                 //业务逻辑处理                 Thread.sleep(5000);                 String message = "username:wangbinghua";                 return message;             }         });         webAsyncTask.onCompletion(new Runnable() {             @Override             public void run() {                 System.out.println("调用完成");             }         });         webAsyncTask.onTimeout(new Callable&lt;String&gt;() {             @Override             public String call() throws Exception {                 System.out.println("业务处理超时");                 return "&lt;h1&gt;Time Out&lt;/h1&gt;";             }         });          return webAsyncTask;     } </code></pre> <p>@Async实例</p> <blockquote> <p>含义</p> <blockquote> <p>1，在方法上使用该@Async注解，申明该方法是一个异步任务；</p> <p>2，在类上面使用该@Async注解，申明该类中的所有方法都是异步任务；</p> <p>3，使用此注解的方法的类对象，必须是spring管理下的bean对象；</p> <p>4，要想使用异步任务，需要在主类上开启异步配置，即，配置上@EnableAsync注解；</p> </blockquote> <p>用法</p> <blockquote> <p>在Spring中启用@Async：</p> <pre><code>    1，@Async注解在使用时，如果不指定线程池的名称，则使用Spring默认的线程池，Spring默认的线程池为**SimpleAsyncTaskExecutor**。      2，方法上一旦标记了这个@Async注解，当其它线程调用这个方法时，就会开启一个新的子线程去异步处理该业务逻辑。 </code></pre> </blockquote> <p>例子</p> <blockquote> <p>3.1，启动类中增加@EnableAsync</p> <p>以Spring boot 为例，启动类中增加@EnableAsync：</p> <pre><code>@EnableAsync@SpringBootApplicationpublic class ManageApplication {    //...} </code></pre> <p>3.2，方法上加@Async注解：</p> <pre><code>@Componentpublic class MyAsyncTask {     @Async    public void asyncCpsItemImportTask(Long platformId, String jsonList){        //...具体业务逻辑    }} </code></pre> <p>3.3，默认线程池的缺陷：</p> <pre><code>    上面的配置会启用默认的线程池/执行器，异步执行指定的方法。      Spring默认的线程池的默认配置：      默认核心线程数：8，        最大线程数：Integet.MAX_VALUE，    队列使用LinkedBlockingQueue，    容量是：Integet.MAX_VALUE，    空闲线程保留时间：60s，    线程池拒绝策略：AbortPolicy。      从最大线程数的配置上，相信你也看到问题了：**并发情况下，会无限创建线程。。。** </code></pre> <p>3.4，默认线程池–自定义配置参数：</p> <pre><code>    默认线程池的上述缺陷如何解决：      答案是，自定义配置参数就可以了。  spring:   task:     execution:       pool:         max-size: 6         core-size: 3         keep-alive: 3s         queue-capacity: 1000         thread-name-prefix: name </code></pre> </blockquote> <p>实现原理</p> <blockquote> <p>@Async的原理概括：</p> <p>@Async 的原理是通过 Spring AOP 动态代理 的方式来实现的。</p> <pre><code>    Spring容器启动初始化bean时，判断类中是否使用了@[Async](https://so.csdn.net/so/search?q=Async\&amp;spm=1001.2101.3001.7020 "Async")注解，如果使用了则为其创建切入点和切入点处理器，根据切入点创建代理，      在线程调用@Async注解标注的方法时，会调用代理，执行切入点处理器invoke方法，将方法的执行提交给线程池中的另外一个线程来处理，从而实现了异步执行。      所以，需要注意的一个错误用法是，如果a方法调用它同类中的标注@Async的b方法，是不会异步执行的，因为从a方法进入调用的都是该类对象本身，不会进入代理类。 </code></pre> <p>因此，相同类中的方法调用带@Async的方法是无法异步的，这种情况仍然是同步。</p> </blockquote> </blockquote> <p>DeferredResult实例</p> <blockquote> <p><code>DeferredResult</code>和<code>Callable</code>实现功能类型，都是异步返回，只不过<code>Callable</code>不能直接设置超时时间，还需要和<code>FutureTask</code>配合使用</p> </blockquote> <pre><code>@Controller public class DeferedResultController {       private ConcurrentLinkedDeque&lt;DeferredResult&lt;String&gt;&gt; deferredResults =             new ConcurrentLinkedDeque&lt;DeferredResult&lt;String&gt;&gt;();       @RequestMapping("/getResult")     @ResponseBody     public DeferredResult&lt;String&gt; getDeferredResultController(){          //设置 5秒就会超时         final DeferredResult&lt;String&gt; stringDeferredResult = new DeferredResult&lt;String&gt;(1000);                  //将请求加入到队列中         deferredResults.add(stringDeferredResult);          final String message = "{username:wangbinghua}";          ExecutorService executorService = Executors.newFixedThreadPool(10);         executorService.submit(new Runnable() {             @Override             public void run() {                            try {                     Thread.sleep(1010);                 } catch (InterruptedException e) {                     e.printStackTrace();                 }                  //业务处理                 System.out.println("业务处理");                 stringDeferredResult.setResult(message);             }         });           //setResult完毕之后，调用该方法         stringDeferredResult.onCompletion(new Runnable() {             @Override             public void run() {                 System.out.println("异步调用完成");                 //响应完毕之后，将请求从队列中去除掉                 deferredResults.remove(stringDeferredResult);             }         });          stringDeferredResult.onTimeout(new Runnable() {             @Override             public void run() {                 System.out.println("业务处理超时");                 stringDeferredResult.setResult("error:timeOut");             }         });         return stringDeferredResult;     }      //开启线程定时扫描队列，响应客户端     @Scheduled(fixedRate = 1000)     public void scheduleResult(){         System.out.println(new Date());         for(int i = 0;i &lt; deferredResults.size();i++){             DeferredResult&lt;String&gt; deferredResult = deferredResults.getFirst();             deferredResult.setResult("result:" + i);         }     } } </code></pre> <p>说明</p> <blockquote> <p>在Spring Mvc的控制层（springmvc层框架中）中，只要有一个用户请求便会实例化一个DeferedResult对象，然后返回该对象，然后就会释放TOMCAT的线程，从而完成客户端响应。只要DeferedResult对象不设置result响应的内容，则控制层（springMVC层）的容器主线程在响应客户端上就会发生阻塞。</p> <p>因为SpringMVC只会实例化一个Controller对象，无论有多少个用户请求，在堆上只有一个Controller对象，因此可以添加一个成员变量List，将这些用户请求的DeferedResult对象存放到List中，然后启动一个定时线程扫描list，从而依次执行setResult方法，响应客户端。</p> </blockquote></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-60604.htm">C语言简明清晰讲解结构体_C 语言</a></p>
                                        <p>下一个：<a href="/news/article-61168.htm">pandas读取csv文件失败</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-29-node-share-links.htm" title="11月29日→20M/S|2024年最新免费节点ClashX Meta订阅链接地址">11月29日→20M/S|2024年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-32907.htm" title="springboot集成elasticsearch注意事项">springboot集成elasticsearch注意事项</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-11-free-node-subscribe.htm" title="12月11日→18.3M/S|2024年最新免费节点ClashX Meta订阅链接地址">12月11日→18.3M/S|2024年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-6-node-share-links.htm" title="1月6日→22.8M/S|2025年最新免费节点ClashX Meta订阅链接地址">1月6日→22.8M/S|2025年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-53280.htm" title="Springboot项目使用拦截器方法详解">Springboot项目使用拦截器方法详解</a></li>
                        <li class="py-2"><a href="/news/article-33856.htm" title="动物疫苗销售需要什么手续呢多少钱一针（动物疫苗经销商）">动物疫苗销售需要什么手续呢多少钱一针（动物疫苗经销商）</a></li>
                        <li class="py-2"><a href="/news/article-30010.htm" title="C语言数据结构、十字链表的分析及实现">C语言数据结构、十字链表的分析及实现</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-16-free-high-speed-nodes.htm" title="2月16日→19.2M/S|2025年最新免费节点ClashX Meta订阅链接地址">2月16日→19.2M/S|2025年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-20-free-high-speed-nodes.htm" title="2月20日→18.6M/S|2025年最新免费节点ClashX Meta订阅链接地址">2月20日→18.6M/S|2025年最新免费节点ClashX Meta订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-12-free-node-subscribe.htm" title="1月12日→20.1M/S|2025年最新免费节点ClashX Meta订阅链接地址">1月12日→20.1M/S|2025年最新免费节点ClashX Meta订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">72</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- ::::::::::::::: /END ABOUT US :::::::::::::::::::-->
        <!-- ::::::::::::::: FOOTER ::::::::::::::::::::-->
    <div id="footer" class="pt-lg-5 pt-0 mt-0 mt-lg-5 text-center text-lg-start">
        <div class="container">
            <hr class="hr">
            <div class="row gy-4 gy-lg-0 pb-5 pb-lg-4">
                <div class="col-sm-4 font-size-14 accent-text-color text-center text-lg-start">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <a href="/">ClashX Meta免费机场订阅节点官网</a> 版权所有 Powered by WordPress
                </div>
                <div class="col-sm-4 text-center">
                    <ul class="list-unstyled font-size-14 list-inline mb-0">
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#">Terms</a></li>
                        <li class="list-inline-item accent-text-color">·</li>
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#">Privacy Policy</a></li>
                    </ul>
                </div>
                <div class="col-sm-4 text-lg-end text-center">
                    <ul class="list-unstyled font-size-14 list-inline mb-0">
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#"><i data-feather="facebook" class="icon-24"></i></a></li>
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#"><i data-feather="twitter" class="icon-24"></i></a></li>
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#"><i data-feather="instagram" class="icon-24"></i></a></li>
                        <li class="list-inline-item"><a class="accent-text-color text-decoration-none" href="#"><i data-feather="slack" class="icon-24"></i></a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- ::::::::::::::: /END FOOTER :::::::::::::::-->
    <script src="/assets/website/js/frontend/clashxmeta/jquery-1.12.4.min.js"></script>
    <script src="/assets/website/js/frontend/clashxmeta/pace.min.js"></script>
    <script src="/assets/website/js/frontend/clashxmeta/wow.js"></script>
    <script src="/assets/website/js/frontend/clashxmeta/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashxmeta/feather.min.js"></script>
    <script src="/assets/website/js/frontend/clashxmeta/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>